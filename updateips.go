//go:build tools
// +build tools

package main

import (
	"bufio"
	"bytes"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
	"text/template"

	"golang.org/x/tools/imports"
)

var ipURLs = []string{
	"https://www.cloudflare.com/ips-v4",
	"https://www.cloudflare.com/ips-v6",
}

func main() {
	var ips []string
	for _, ipURL := range ipURLs {
		resp, err := http.Get(ipURL)
		if err != nil {
			log.Fatalf("http fetch err: %s", err)
		}

		r := bufio.NewReader(resp.Body)
		for {
			line, err := r.ReadString('\n')
			if err == io.EOF {
				break
			} else if err != nil {
				log.Fatalf("read %s err: %s", ipURL, err)
			}

			ip := strings.TrimSpace(line)
			if ip == "" {
				continue
			}

			ips = append(ips, ip)
		}
	}

	if len(ips) == 0 {
		log.Fatalf("failed to fetch any ips, something is wrong")
	}

	tmpl := template.Must(template.New("ips").Parse(ipTmpl))

	tmplData := TmplData{IPs: ips}

	var buf bytes.Buffer
	err := tmpl.Execute(&buf, tmplData)
	if err != nil {
		log.Fatalf("template err: %s", err)
	}

	fmted, err := imports.Process("ips.gen.go", buf.Bytes(), nil)
	if err != nil {
		log.Fatalf("goimports error: %s", err)
	}

	fout, err := os.Create("ips.gen.go")
	if err != nil {
		log.Fatalf("open ips.gen.go err: %s", err)
	}

	fout.Write(fmted)
	fout.Close()
}

var ipTmpl = `
// Code generated by update_ips.go. DO NOT EDIT.

package cloudflareip

import (
	"net/netip"

	"github.com/gaissmai/cidrtree"
)

var cidrTbl = new(cidrtree.Table[IPRange])

func init() {
  var r IPRange
{{- range .IPs}}
  r = IPRange{
		Prefix: netip.MustParsePrefix("{{.}}"),
	}
  cidrTbl.Insert(r.Prefix, r)
{{- end}}
}
`

type TmplData struct {
	IPs []string
}
